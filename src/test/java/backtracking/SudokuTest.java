package backtracking;

import org.junit.Assert;
import org.junit.Test;

public class SudokuTest {

    @Test
    public void solveSudoku_test1() {
        char[][] board = new char[][]{
                {'5','3','.','.','7','.','.','.','.'},
                {'6','.','.','1','9','5','.','.','.'},
                {'.','9','8','.','.','.','.','6','.'},
                {'8','.','.','.','6','.','.','.','3'},
                {'4','.','.','8','.','3','.','.','1'},
                {'7','.','.','.','2','.','.','.','6'},
                {'.','6','.','.','.','.','2','8','.'},
                {'.','.','.','4','1','9','.','.','5'},
                {'.','.','.','.','8','.','.','7','9'}
        };
        char[][] ans = new char[][]{{'5','3','4','6','7','8','9','1','2'},{'6','7','2','1','9','5','3','4','8'},{'1','9','8','3','4','2','5','6','7'},{'8','5','9','7','6','1','4','2','3'},{'4','2','6','8','5','3','7','9','1'},{'7','1','3','9','2','4','8','5','6'},{'9','6','1','5','3','7','2','8','4'},{'2','8','7','4','1','9','6','3','5'},{'3','4','5','2','8','6','1','7','9'}};
        Sudoku s = new Sudoku();
        s.solveSudoku(board);
        Assert.assertArrayEquals(ans, board);
    }


    @Test
    public void solveSudoku_test2() {
        char[][] board = new char[][]{
                {'5','.','.','.','7','.','.','.','.'},
                {'6','.','.','1','.','5','.','.','.'},
                {'.','9','8','.','.','.','.','6','.'},
                {'8','.','.','.','6','.','.','.','3'},
                {'4','.','.','8','.','3','.','.','1'},
                {'7','.','.','.','2','.','.','.','6'},
                {'.','6','.','.','.','.','2','8','.'},
                {'.','.','.','4','1','9','.','.','5'},
                {'.','.','.','.','8','.','.','7','9'}
        };
        char[][] ans = new char[][]{{'5','3','4','6','7','8','9','1','2'},{'6','7','2','1','9','5','3','4','8'},{'1','9','8','3','4','2','5','6','7'},{'8','5','9','7','6','1','4','2','3'},{'4','2','6','8','5','3','7','9','1'},{'7','1','3','9','2','4','8','5','6'},{'9','6','1','5','3','7','2','8','4'},{'2','8','7','4','1','9','6','3','5'},{'3','4','5','2','8','6','1','7','9'}};
        Sudoku s = new Sudoku();
        s.solveSudoku(board);
        Assert.assertArrayEquals(ans, board);
    }

    @Test
    public void solveSudoku_test3() {
        char[][] board = new char[][]{
                {'.','.','3','.','.','.','.','.','9'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','9','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'9','.','.','.','.','.','.','.','2'},
        };

        char[][] ans = new char[][]{
                {'1','2','3','4','5','6','7','8','9',},
                {'4','5','6','7','8','9','1','2','3',},
                {'7','8','9','1','2','3','4','5','6',},
                {'2','1','4','3','6','5','8','9','7',},
                {'3','6','5','8','9','7','2','1','4',},
                {'8','9','7','2','1','4','3','6','5',},
                {'5','3','1','6','4','2','9','7','8',},
                {'6','4','2','9','7','8','5','3','1',},
                {'9','7','8','5','3','1','6','4','2',}
        };
        Sudoku s = new Sudoku();
        s.solveSudoku(board);
        Assert.assertArrayEquals(ans, board);
    }

    @Test
    public void solveSudoku_test0() {
        char[][] board = new char[][]{
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
        };

        char[][] ans = new char[][]{
                {'1','2','3','4','5','6','7','8','9',},
                {'4','5','6','7','8','9','1','2','3',},
                {'7','8','9','1','2','3','4','5','6',},
                {'2','1','4','3','6','5','8','9','7',},
                {'3','6','5','8','9','7','2','1','4',},
                {'8','9','7','2','1','4','3','6','5',},
                {'5','3','1','6','4','2','9','7','8',},
                {'6','4','2','9','7','8','5','3','1',},
                {'9','7','8','5','3','1','6','4','2',}
        };
        Sudoku s = new Sudoku();
        s.solveSudoku(board);
        Assert.assertArrayEquals(ans, board);
    }


    private void displayMatrix(char[][] board) {
        System.out.print("{");
        for (int r = 0; r < 9; r += 1) {
            System.out.print("\n{");
            for (int c = 0; c < 9; c += 1) {
                System.out.printf("'%s',", board[r][c]);
            }
            if (r < 8) {
                System.out.print("},");
            } else {
                System.out.print("}");
            }
        }
        System.out.println("\n}");
    }
}